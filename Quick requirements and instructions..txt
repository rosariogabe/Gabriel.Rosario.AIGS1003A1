
Ask
*********************************************************
Implement trainAndTune and calculateLogJointProbabilities in the given naiveBayes.py.
In trainAndTune, estimate conditional probabilities from the training data for each possible value of k given in the list kgrid
Evaluate accuracy on the held-out validation set for each k and choose the value with the highest validation accuracy
In case of ties, prefer the lowest value of k
Test your classifier with: python dataClassifier.py -c naiveBayes –autotune

Optionally, you can add code to the analysis method in dataClassifier.py to explore the mistakes that your classifier is making.
To run your classifier with only one particular value of k, remove the –autotune option. This will ensure that kgrid has only one value, which you can change with -k.



*********************************************************************************
For example, using a fixed value of k=2 and 100 training examples, you should get a validation
accuracy of about 69% and a test accuracy of 55%. Using –autotune, which tries different values of
k, you should get a validation accuracy of about 74% and a test accuracy of 65%. Note that stated
accuracies may vary slightly because of implementation details. You are required to use all samples
in the dataset and analyze your results. Note, you are only required to fill out dataClassifier.py
and naiveBayes.py, as necessary. Also, take note of the difference between the given testing and
training data.


Read but do not edit the following files:
• classificationMethod.py - Abstract super class for the classifiers you will write. (You should
read this file carefully to see how the infrastructure is set up.)
• samples.py - I/O code to read in the classification data.
• utils.py - Code defining some useful tools. You may be familiar with some of these by now,
and they will save you a lot of time.
• mostFrequent.py - A simple baseline classifier that just labels every instance as the most
frequent class.
Alternatively, you can develop your code from scratch (however, ensure your code is fully commented/documented).